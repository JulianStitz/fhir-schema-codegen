# WARNING: This file is autogenerated by FHIR Schema Codegen.
# https://github.com/fhir-schema/fhir-schema-codegen
# Any manual changes made to this file may be overwritten.

from __future__ import annotations
from pydantic import BaseModel, ConfigDict, Field, PositiveInt
from typing import Optional, List as L, Literal

from aidbox.hl7_fhir_r4_core.base import Address, BackboneElement, CodeableConcept, ContactPoint, HumanName, Identifier, Money, Period, Quantity, Reference
from aidbox.hl7_fhir_r4_core.domain_resource import DomainResource


class InsurancePlanCoverageBenefitLimit(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    code: Optional[CodeableConcept] = Field(None, alias="code", serialization_alias="code")
    value: Optional[Quantity] = Field(None, alias="value", serialization_alias="value")

class InsurancePlanCoverageBenefit(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    limit: Optional[L[InsurancePlanCoverageBenefitLimit]] = Field(None, alias="limit", serialization_alias="limit")
    requirement: Optional[str] = Field(None, alias="requirement", serialization_alias="requirement")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")

class InsurancePlanCoverage(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    benefit: Optional[L[InsurancePlanCoverageBenefit]] = Field(None, alias="benefit", serialization_alias="benefit")
    network: Optional[L[Reference]] = Field(None, alias="network", serialization_alias="network")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")

class InsurancePlanPlanGeneralCost(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    comment: Optional[str] = Field(None, alias="comment", serialization_alias="comment")
    cost: Optional[Money] = Field(None, alias="cost", serialization_alias="cost")
    group_size: Optional[PositiveInt] = Field(None, alias="groupSize", serialization_alias="groupSize")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")

class InsurancePlanPlanSpecificCostBenefitCost(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    applicability: Optional[CodeableConcept] = Field(None, alias="applicability", serialization_alias="applicability")
    qualifiers: Optional[L[CodeableConcept]] = Field(None, alias="qualifiers", serialization_alias="qualifiers")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")
    value: Optional[Quantity] = Field(None, alias="value", serialization_alias="value")

class InsurancePlanPlanSpecificCostBenefit(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    cost: Optional[L[InsurancePlanPlanSpecificCostBenefitCost]] = Field(None, alias="cost", serialization_alias="cost")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")

class InsurancePlanPlanSpecificCost(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    benefit: Optional[L[InsurancePlanPlanSpecificCostBenefit]] = Field(None, alias="benefit", serialization_alias="benefit")
    category: Optional[CodeableConcept] = Field(None, alias="category", serialization_alias="category")

class InsurancePlanPlan(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    coverage_area: Optional[L[Reference]] = Field(None, alias="coverageArea", serialization_alias="coverageArea")
    general_cost: Optional[L[InsurancePlanPlanGeneralCost]] = Field(None, alias="generalCost", serialization_alias="generalCost")
    identifier: Optional[L[Identifier]] = Field(None, alias="identifier", serialization_alias="identifier")
    network: Optional[L[Reference]] = Field(None, alias="network", serialization_alias="network")
    specific_cost: Optional[L[InsurancePlanPlanSpecificCost]] = Field(None, alias="specificCost", serialization_alias="specificCost")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")

class InsurancePlanContact(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    address: Optional[Address] = Field(None, alias="address", serialization_alias="address")
    name: Optional[HumanName] = Field(None, alias="name", serialization_alias="name")
    purpose: Optional[CodeableConcept] = Field(None, alias="purpose", serialization_alias="purpose")
    telecom: Optional[L[ContactPoint]] = Field(None, alias="telecom", serialization_alias="telecom")


class InsurancePlan(DomainResource):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    administered_by: Optional[Reference] = Field(None, alias="administeredBy", serialization_alias="administeredBy")
    alias: Optional[L[str]] = Field(None, alias="alias", serialization_alias="alias")
    contact: Optional[L[InsurancePlanContact]] = Field(None, alias="contact", serialization_alias="contact")
    coverage: Optional[L[InsurancePlanCoverage]] = Field(None, alias="coverage", serialization_alias="coverage")
    coverage_area: Optional[L[Reference]] = Field(None, alias="coverageArea", serialization_alias="coverageArea")
    endpoint: Optional[L[Reference]] = Field(None, alias="endpoint", serialization_alias="endpoint")
    identifier: Optional[L[Identifier]] = Field(None, alias="identifier", serialization_alias="identifier")
    name: Optional[str] = Field(None, alias="name", serialization_alias="name")
    network: Optional[L[Reference]] = Field(None, alias="network", serialization_alias="network")
    owned_by: Optional[Reference] = Field(None, alias="ownedBy", serialization_alias="ownedBy")
    period: Optional[Period] = Field(None, alias="period", serialization_alias="period")
    plan: Optional[L[InsurancePlanPlan]] = Field(None, alias="plan", serialization_alias="plan")
    status: Optional[Literal["draft", "active", "retired", "unknown"]] = Field(None, alias="status", serialization_alias="status")
    type: Optional[L[CodeableConcept]] = Field(None, alias="type", serialization_alias="type")

