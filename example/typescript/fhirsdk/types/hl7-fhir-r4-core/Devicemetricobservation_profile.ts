// WARNING: This file is autogenerated by FHIR Schema Codegen.
// https://github.com/fhir-schema/fhir-schema-codegen
// Any manual changes made to this file may be overwritten.

import { Annotation } from '../hl7-fhir-r4-core/Annotation';
import { CodeableConcept } from '../hl7-fhir-r4-core/CodeableConcept';
import { Identifier } from '../hl7-fhir-r4-core/Identifier';
import { Observation } from '../hl7-fhir-r4-core/Observation';
import { ObservationComponent } from '../hl7-fhir-r4-core/Observation';
import { ObservationReferenceRange } from '../hl7-fhir-r4-core/Observation';
import { Period } from '../hl7-fhir-r4-core/Period';
import { Quantity } from '../hl7-fhir-r4-core/Quantity';
import { Range } from '../hl7-fhir-r4-core/Range';
import { Ratio } from '../hl7-fhir-r4-core/Ratio';
import { Reference } from '../hl7-fhir-r4-core/Reference';
import { SampledData } from '../hl7-fhir-r4-core/SampledData';
import { Element } from '../hl7-fhir-r4-core/Element';

export interface Devicemetricobservation {
    __profileUrl: 'http://hl7.org/fhir/StructureDefinition/devicemetricobservation';
    
    referenceRange?: ObservationReferenceRange[];
    hasMember?: Reference<'Observation'>[];
    derivedFrom?: Reference<'Observation'>[];
    interpretation?: CodeableConcept[];
    encounter?: Reference<'Encounter'>;
    method?: CodeableConcept;
    valueTime?: string;
    specimen?: Reference<'Specimen'>;
    valueQuantity?: Quantity;
    valueString?: string;
    valueRatio?: Ratio;
    valueDateTime?: string;
    note?: Annotation[];
    valueSampledData?: SampledData;
    effectiveDateTime: string;
    status: 'registered' | 'preliminary' | 'final' | 'amended' | 'cancelled' | 'entered-in-error' | 'unknown' | 'corrected';
    code: CodeableConcept;
    identifier?: Identifier[];
    valueCodeableConcept?: CodeableConcept;
    bodySite?: CodeableConcept;
    issued?: string;
    valuePeriod?: Period;
    device: Reference<'DeviceMetric'>;
    valueRange?: Range;
    subject: Reference<'Device' | 'Patient'>;
    dataAbsentReason?: CodeableConcept;
}

export const attach_Devicemetricobservation = (resource: Observation, profile: Devicemetricobservation): Observation => {
    return {
        ...resource,
        meta: {
            profile: ['http://hl7.org/fhir/StructureDefinition/devicemetricobservation']
        },
        referenceRange: profile.referenceRange,
        hasMember: profile.hasMember,
        derivedFrom: profile.derivedFrom,
        interpretation: profile.interpretation,
        encounter: profile.encounter,
        method: profile.method,
        valueTime: profile.valueTime,
        specimen: profile.specimen,
        valueQuantity: profile.valueQuantity,
        valueString: profile.valueString,
        valueRatio: profile.valueRatio,
        valueDateTime: profile.valueDateTime,
        note: profile.note,
        valueSampledData: profile.valueSampledData,
        effectiveDateTime: profile.effectiveDateTime,
        status: profile.status,
        code: profile.code,
        identifier: profile.identifier,
        valueCodeableConcept: profile.valueCodeableConcept,
        bodySite: profile.bodySite,
        issued: profile.issued,
        valuePeriod: profile.valuePeriod,
        device: profile.device,
        valueRange: profile.valueRange,
        subject: profile.subject,
        dataAbsentReason: profile.dataAbsentReason,
    }
}

export const extract_Observation = (resource: Observation): Devicemetricobservation => {
    const reference_pred_hasMember = (ref?: Reference) => {
        return !ref
            || ref.reference?.startsWith('MolecularSequence/')
            || ref.reference?.startsWith('Observation/')
            || ref.reference?.startsWith('QuestionnaireResponse/')
            ;
    }
    if ( !resource.hasMember || resource.hasMember.every( (ref) => reference_pred_hasMember(ref) ) ) {
        throw new Error("'hasMember' has different references in profile and specialization");
    }
    
    const reference_pred_derivedFrom = (ref?: Reference) => {
        return !ref
            || ref.reference?.startsWith('DocumentReference/')
            || ref.reference?.startsWith('ImagingStudy/')
            || ref.reference?.startsWith('Media/')
            || ref.reference?.startsWith('MolecularSequence/')
            || ref.reference?.startsWith('Observation/')
            || ref.reference?.startsWith('QuestionnaireResponse/')
            ;
    }
    if ( !resource.derivedFrom || resource.derivedFrom.every( (ref) => reference_pred_derivedFrom(ref) ) ) {
        throw new Error("'derivedFrom' has different references in profile and specialization");
    }
    
    if (resource.effectiveDateTime === undefined) {
        throw new Error("'effectiveDateTime' is required for http://hl7.org/fhir/StructureDefinition/devicemetricobservation");
    }
    
    if (resource.device === undefined) {
        throw new Error("'device' is required for http://hl7.org/fhir/StructureDefinition/devicemetricobservation");
    }
    
    const reference_pred_device = (ref?: Reference) => {
        return !ref
            || ref.reference?.startsWith('Device/')
            || ref.reference?.startsWith('DeviceMetric/')
            ;
    }
    if ( reference_pred_device(resource.device) ) {
        throw new Error("'device' has different references in profile and specialization");
    }
    
    if (resource.subject === undefined) {
        throw new Error("'subject' is required for http://hl7.org/fhir/StructureDefinition/devicemetricobservation");
    }
    
    const reference_pred_subject = (ref?: Reference) => {
        return !ref
            || ref.reference?.startsWith('Device/')
            || ref.reference?.startsWith('Group/')
            || ref.reference?.startsWith('Location/')
            || ref.reference?.startsWith('Patient/')
            ;
    }
    if ( reference_pred_subject(resource.subject) ) {
        throw new Error("'subject' has different references in profile and specialization");
    }
    
    return {
        __profileUrl: 'http://hl7.org/fhir/StructureDefinition/devicemetricobservation',
        referenceRange: resource.referenceRange,
        hasMember: resource.hasMember as Devicemetricobservation['hasMember'],
        derivedFrom: resource.derivedFrom as Devicemetricobservation['derivedFrom'],
        interpretation: resource.interpretation,
        encounter: resource.encounter,
        method: resource.method,
        valueTime: resource.valueTime,
        specimen: resource.specimen,
        valueQuantity: resource.valueQuantity,
        valueString: resource.valueString,
        valueRatio: resource.valueRatio,
        valueDateTime: resource.valueDateTime,
        note: resource.note,
        valueSampledData: resource.valueSampledData,
        effectiveDateTime: resource.effectiveDateTime,
        status: resource.status,
        code: resource.code,
        identifier: resource.identifier,
        valueCodeableConcept: resource.valueCodeableConcept,
        bodySite: resource.bodySite,
        issued: resource.issued,
        valuePeriod: resource.valuePeriod,
        device: resource.device as Devicemetricobservation['device'],
        valueRange: resource.valueRange,
        subject: resource.subject as Devicemetricobservation['subject'],
        dataAbsentReason: resource.dataAbsentReason,
    }
}
