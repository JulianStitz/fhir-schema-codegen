# WARNING: This file is autogenerated by FHIR Schema Codegen.
# https://github.com/fhir-schema/fhir-schema-codegen
# Any manual changes made to this file may be overwritten.

from __future__ import annotations
from pydantic import BaseModel, ConfigDict, Field, PositiveInt
from typing import Optional, List as L, Literal, ForwardRef

from aidbox.hl7_fhir_r4_core.base import BackboneElement, CodeableConcept, Identifier, Quantity, Range, Reference
from aidbox.hl7_fhir_r4_core.domain_resource import DomainResource
from aidbox.hl7_fhir_r4_core.resource_families import DomainResourceFamily


class SubstanceReferenceInformationGene(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    gene: Optional[CodeableConcept] = Field(None, alias="gene", serialization_alias="gene")
    gene_sequence_origin: Optional[CodeableConcept] = Field(None, alias="geneSequenceOrigin", serialization_alias="geneSequenceOrigin")
    source: Optional[L[Reference]] = Field(None, alias="source", serialization_alias="source")

class SubstanceReferenceInformationGeneElement(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    element: Optional[Identifier] = Field(None, alias="element", serialization_alias="element")
    source: Optional[L[Reference]] = Field(None, alias="source", serialization_alias="source")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")

class SubstanceReferenceInformationClassification(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    classification: Optional[CodeableConcept] = Field(None, alias="classification", serialization_alias="classification")
    domain: Optional[CodeableConcept] = Field(None, alias="domain", serialization_alias="domain")
    source: Optional[L[Reference]] = Field(None, alias="source", serialization_alias="source")
    subtype: Optional[L[CodeableConcept]] = Field(None, alias="subtype", serialization_alias="subtype")

class SubstanceReferenceInformationTarget(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    amount_quantity: Optional[Quantity] = Field(None, alias="amountQuantity", serialization_alias="amountQuantity")
    amount_range: Optional[Range] = Field(None, alias="amountRange", serialization_alias="amountRange")
    amount_string: Optional[str] = Field(None, alias="amountString", serialization_alias="amountString")
    amount_type: Optional[CodeableConcept] = Field(None, alias="amountType", serialization_alias="amountType")
    interaction: Optional[CodeableConcept] = Field(None, alias="interaction", serialization_alias="interaction")
    organism: Optional[CodeableConcept] = Field(None, alias="organism", serialization_alias="organism")
    organism_type: Optional[CodeableConcept] = Field(None, alias="organismType", serialization_alias="organismType")
    source: Optional[L[Reference]] = Field(None, alias="source", serialization_alias="source")
    target: Optional[Identifier] = Field(None, alias="target", serialization_alias="target")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")


class SubstanceReferenceInformation(DomainResource):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    resource_type: str = Field(
        default='SubstanceReferenceInformation',
        alias='resourceType',
        serialization_alias='resourceType',
        frozen=True,
        pattern='SubstanceReferenceInformation'
    )
    
    classification: Optional[L[SubstanceReferenceInformationClassification]] = Field(None, alias="classification", serialization_alias="classification")
    comment: Optional[str] = Field(None, alias="comment", serialization_alias="comment")
    gene: Optional[L[SubstanceReferenceInformationGene]] = Field(None, alias="gene", serialization_alias="gene")
    gene_element: Optional[L[SubstanceReferenceInformationGeneElement]] = Field(None, alias="geneElement", serialization_alias="geneElement")
    target: Optional[L[SubstanceReferenceInformationTarget]] = Field(None, alias="target", serialization_alias="target")

