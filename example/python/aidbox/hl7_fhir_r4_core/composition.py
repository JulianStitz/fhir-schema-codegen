# WARNING: This file is autogenerated by FHIR Schema Codegen.
# https://github.com/fhir-schema/fhir-schema-codegen
# Any manual changes made to this file may be overwritten.

from __future__ import annotations
from pydantic import BaseModel, ConfigDict, Field, PositiveInt
from typing import Optional, List as L, Literal

from aidbox.hl7_fhir_r4_core.base import BackboneElement, CodeableConcept, Identifier, Narrative, Period, Reference
from aidbox.hl7_fhir_r4_core.domain_resource import DomainResource


class CompositionSection(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    author: Optional[L[Reference]] = Field(None, alias="author", serialization_alias="author")
    code: Optional[CodeableConcept] = Field(None, alias="code", serialization_alias="code")
    empty_reason: Optional[CodeableConcept] = Field(None, alias="emptyReason", serialization_alias="emptyReason")
    entry: Optional[L[Reference]] = Field(None, alias="entry", serialization_alias="entry")
    focus: Optional[Reference] = Field(None, alias="focus", serialization_alias="focus")
    mode: Optional[Literal["working", "snapshot", "changes"]] = Field(None, alias="mode", serialization_alias="mode")
    ordered_by: Optional[CodeableConcept] = Field(None, alias="orderedBy", serialization_alias="orderedBy")
    section: Optional[L[CompositionSection]] = Field(None, alias="section", serialization_alias="section")
    text: Optional[Narrative] = Field(None, alias="text", serialization_alias="text")
    title: Optional[str] = Field(None, alias="title", serialization_alias="title")

class CompositionAttester(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    mode: Optional[Literal["personal", "professional", "legal", "official"]] = Field(None, alias="mode", serialization_alias="mode")
    party: Optional[Reference] = Field(None, alias="party", serialization_alias="party")
    time: Optional[str] = Field(None, alias="time", serialization_alias="time")

class CompositionEvent(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    code: Optional[L[CodeableConcept]] = Field(None, alias="code", serialization_alias="code")
    detail: Optional[L[Reference]] = Field(None, alias="detail", serialization_alias="detail")
    period: Optional[Period] = Field(None, alias="period", serialization_alias="period")

class CompositionRelatesTo(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    code: Optional[Literal["replaces", "transforms", "signs", "appends"]] = Field(None, alias="code", serialization_alias="code")
    target_identifier: Optional[Identifier] = Field(None, alias="targetIdentifier", serialization_alias="targetIdentifier")
    target_reference: Optional[Reference] = Field(None, alias="targetReference", serialization_alias="targetReference")


class Composition(DomainResource):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    attester: Optional[L[CompositionAttester]] = Field(None, alias="attester", serialization_alias="attester")
    author: Optional[L[Reference]] = Field(None, alias="author", serialization_alias="author")
    category: Optional[L[CodeableConcept]] = Field(None, alias="category", serialization_alias="category")
    confidentiality: Optional[Literal["U", "L", "M", "N", "R", "V", "_Confidentiality", "_ConfidentialityByAccessKind", "_ConfidentialityByInfoType", "_ConfidentialityModifiers"]] = Field(None, alias="confidentiality", serialization_alias="confidentiality")
    custodian: Optional[Reference] = Field(None, alias="custodian", serialization_alias="custodian")
    date: Optional[str] = Field(None, alias="date", serialization_alias="date")
    encounter: Optional[Reference] = Field(None, alias="encounter", serialization_alias="encounter")
    event: Optional[L[CompositionEvent]] = Field(None, alias="event", serialization_alias="event")
    identifier: Optional[Identifier] = Field(None, alias="identifier", serialization_alias="identifier")
    relates_to: Optional[L[CompositionRelatesTo]] = Field(None, alias="relatesTo", serialization_alias="relatesTo")
    section: Optional[L[CompositionSection]] = Field(None, alias="section", serialization_alias="section")
    status: Optional[Literal["preliminary", "final", "amended", "entered-in-error"]] = Field(None, alias="status", serialization_alias="status")
    subject: Optional[Reference] = Field(None, alias="subject", serialization_alias="subject")
    title: Optional[str] = Field(None, alias="title", serialization_alias="title")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")

