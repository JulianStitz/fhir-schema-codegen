# WARNING: This file is autogenerated by FHIR Schema Codegen.
# https://github.com/fhir-schema/fhir-schema-codegen
# Any manual changes made to this file may be overwritten.

from __future__ import annotations
from pydantic import BaseModel, ConfigDict, Field, PositiveInt
from typing import Optional, List as L, Literal, ForwardRef

from aidbox.hl7_fhir_r4_core.base import BackboneElement, CodeableConcept, Coding, Duration, Identifier, Period, Reference
from aidbox.hl7_fhir_r4_core.domain_resource import DomainResource
from aidbox.hl7_fhir_r4_core.resource_families import DomainResourceFamily


class EncounterDiagnosis(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    condition: Optional[Reference] = Field(None, alias="condition", serialization_alias="condition")
    rank: Optional[PositiveInt] = Field(None, alias="rank", serialization_alias="rank")
    use: Optional[CodeableConcept] = Field(None, alias="use", serialization_alias="use")

class EncounterParticipant(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    individual: Optional[Reference] = Field(None, alias="individual", serialization_alias="individual")
    period: Optional[Period] = Field(None, alias="period", serialization_alias="period")
    type: Optional[L[CodeableConcept]] = Field(None, alias="type", serialization_alias="type")

class EncounterClassHistory(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    class_: Optional[Coding] = Field(None, alias="class", serialization_alias="class")
    period: Optional[Period] = Field(None, alias="period", serialization_alias="period")

class EncounterHospitalization(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    admit_source: Optional[CodeableConcept] = Field(None, alias="admitSource", serialization_alias="admitSource")
    destination: Optional[Reference] = Field(None, alias="destination", serialization_alias="destination")
    diet_preference: Optional[L[CodeableConcept]] = Field(None, alias="dietPreference", serialization_alias="dietPreference")
    discharge_disposition: Optional[CodeableConcept] = Field(None, alias="dischargeDisposition", serialization_alias="dischargeDisposition")
    origin: Optional[Reference] = Field(None, alias="origin", serialization_alias="origin")
    pre_admission_identifier: Optional[Identifier] = Field(None, alias="preAdmissionIdentifier", serialization_alias="preAdmissionIdentifier")
    re_admission: Optional[CodeableConcept] = Field(None, alias="reAdmission", serialization_alias="reAdmission")
    special_arrangement: Optional[L[CodeableConcept]] = Field(None, alias="specialArrangement", serialization_alias="specialArrangement")
    special_courtesy: Optional[L[CodeableConcept]] = Field(None, alias="specialCourtesy", serialization_alias="specialCourtesy")

class EncounterLocation(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    location: Optional[Reference] = Field(None, alias="location", serialization_alias="location")
    period: Optional[Period] = Field(None, alias="period", serialization_alias="period")
    physical_type: Optional[CodeableConcept] = Field(None, alias="physicalType", serialization_alias="physicalType")
    status: Optional[Literal["planned", "active", "reserved", "completed"]] = Field(None, alias="status", serialization_alias="status")

class EncounterStatusHistory(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    period: Optional[Period] = Field(None, alias="period", serialization_alias="period")
    status: Optional[Literal["planned", "arrived", "triaged", "in-progress", "onleave", "finished", "cancelled", "entered-in-error", "unknown"]] = Field(None, alias="status", serialization_alias="status")


class Encounter(DomainResource):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    resource_type: str = Field(
        default='Encounter',
        alias='resourceType',
        serialization_alias='resourceType',
        frozen=True,
        pattern='Encounter'
    )
    
    account: Optional[L[Reference]] = Field(None, alias="account", serialization_alias="account")
    appointment: Optional[L[Reference]] = Field(None, alias="appointment", serialization_alias="appointment")
    based_on: Optional[L[Reference]] = Field(None, alias="basedOn", serialization_alias="basedOn")
    class_: Optional[Coding] = Field(None, alias="class", serialization_alias="class")
    class_history: Optional[L[EncounterClassHistory]] = Field(None, alias="classHistory", serialization_alias="classHistory")
    diagnosis: Optional[L[EncounterDiagnosis]] = Field(None, alias="diagnosis", serialization_alias="diagnosis")
    episode_of_care: Optional[L[Reference]] = Field(None, alias="episodeOfCare", serialization_alias="episodeOfCare")
    hospitalization: Optional[EncounterHospitalization] = Field(None, alias="hospitalization", serialization_alias="hospitalization")
    identifier: Optional[L[Identifier]] = Field(None, alias="identifier", serialization_alias="identifier")
    length: Optional[Duration] = Field(None, alias="length", serialization_alias="length")
    location: Optional[L[EncounterLocation]] = Field(None, alias="location", serialization_alias="location")
    participant: Optional[L[EncounterParticipant]] = Field(None, alias="participant", serialization_alias="participant")
    part_of: Optional[Reference] = Field(None, alias="partOf", serialization_alias="partOf")
    period: Optional[Period] = Field(None, alias="period", serialization_alias="period")
    priority: Optional[CodeableConcept] = Field(None, alias="priority", serialization_alias="priority")
    reason_code: Optional[L[CodeableConcept]] = Field(None, alias="reasonCode", serialization_alias="reasonCode")
    reason_reference: Optional[L[Reference]] = Field(None, alias="reasonReference", serialization_alias="reasonReference")
    service_provider: Optional[Reference] = Field(None, alias="serviceProvider", serialization_alias="serviceProvider")
    service_type: Optional[CodeableConcept] = Field(None, alias="serviceType", serialization_alias="serviceType")
    status: Optional[Literal["planned", "arrived", "triaged", "in-progress", "onleave", "finished", "cancelled", "entered-in-error", "unknown"]] = Field(None, alias="status", serialization_alias="status")
    status_history: Optional[L[EncounterStatusHistory]] = Field(None, alias="statusHistory", serialization_alias="statusHistory")
    subject: Optional[Reference] = Field(None, alias="subject", serialization_alias="subject")
    type: Optional[L[CodeableConcept]] = Field(None, alias="type", serialization_alias="type")

