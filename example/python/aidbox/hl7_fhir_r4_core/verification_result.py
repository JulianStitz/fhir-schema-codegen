# WARNING: This file is autogenerated by FHIR Schema Codegen.
# https://github.com/fhir-schema/fhir-schema-codegen
# Any manual changes made to this file may be overwritten.

from __future__ import annotations
from pydantic import BaseModel, ConfigDict, Field, PositiveInt
from typing import Optional, List as L, Literal, ForwardRef

from aidbox.hl7_fhir_r4_core.base import BackboneElement, CodeableConcept, Reference, Signature, Timing
from aidbox.hl7_fhir_r4_core.domain_resource import DomainResource
from aidbox.hl7_fhir_r4_core.resource_families import DomainResourceFamily


class VerificationResultValidator(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    attestation_signature: Optional[Signature] = Field(None, alias="attestationSignature", serialization_alias="attestationSignature")
    identity_certificate: Optional[str] = Field(None, alias="identityCertificate", serialization_alias="identityCertificate")
    organization: Optional[Reference] = Field(None, alias="organization", serialization_alias="organization")

class VerificationResultPrimarySource(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    can_push_updates: Optional[CodeableConcept] = Field(None, alias="canPushUpdates", serialization_alias="canPushUpdates")
    communication_method: Optional[L[CodeableConcept]] = Field(None, alias="communicationMethod", serialization_alias="communicationMethod")
    push_type_available: Optional[L[CodeableConcept]] = Field(None, alias="pushTypeAvailable", serialization_alias="pushTypeAvailable")
    type: Optional[L[CodeableConcept]] = Field(None, alias="type", serialization_alias="type")
    validation_date: Optional[str] = Field(None, alias="validationDate", serialization_alias="validationDate")
    validation_status: Optional[CodeableConcept] = Field(None, alias="validationStatus", serialization_alias="validationStatus")
    who: Optional[Reference] = Field(None, alias="who", serialization_alias="who")

class VerificationResultAttestation(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    communication_method: Optional[CodeableConcept] = Field(None, alias="communicationMethod", serialization_alias="communicationMethod")
    date: Optional[str] = Field(None, alias="date", serialization_alias="date")
    on_behalf_of: Optional[Reference] = Field(None, alias="onBehalfOf", serialization_alias="onBehalfOf")
    proxy_identity_certificate: Optional[str] = Field(None, alias="proxyIdentityCertificate", serialization_alias="proxyIdentityCertificate")
    proxy_signature: Optional[Signature] = Field(None, alias="proxySignature", serialization_alias="proxySignature")
    source_identity_certificate: Optional[str] = Field(None, alias="sourceIdentityCertificate", serialization_alias="sourceIdentityCertificate")
    source_signature: Optional[Signature] = Field(None, alias="sourceSignature", serialization_alias="sourceSignature")
    who: Optional[Reference] = Field(None, alias="who", serialization_alias="who")


class VerificationResult(DomainResource):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    resource_type: str = Field(
        default='VerificationResult',
        alias='resourceType',
        serialization_alias='resourceType',
        frozen=True,
        pattern='VerificationResult'
    )
    
    attestation: Optional[VerificationResultAttestation] = Field(None, alias="attestation", serialization_alias="attestation")
    failure_action: Optional[CodeableConcept] = Field(None, alias="failureAction", serialization_alias="failureAction")
    frequency: Optional[Timing] = Field(None, alias="frequency", serialization_alias="frequency")
    last_performed: Optional[str] = Field(None, alias="lastPerformed", serialization_alias="lastPerformed")
    need: Optional[CodeableConcept] = Field(None, alias="need", serialization_alias="need")
    next_scheduled: Optional[str] = Field(None, alias="nextScheduled", serialization_alias="nextScheduled")
    primary_source: Optional[L[VerificationResultPrimarySource]] = Field(None, alias="primarySource", serialization_alias="primarySource")
    status: Optional[Literal["attested", "validated", "in-process", "req-revalid", "val-fail", "reval-fail"]] = Field(None, alias="status", serialization_alias="status")
    status_date: Optional[str] = Field(None, alias="statusDate", serialization_alias="statusDate")
    target: Optional[L[Reference]] = Field(None, alias="target", serialization_alias="target")
    target_location: Optional[L[str]] = Field(None, alias="targetLocation", serialization_alias="targetLocation")
    validation_process: Optional[L[CodeableConcept]] = Field(None, alias="validationProcess", serialization_alias="validationProcess")
    validation_type: Optional[CodeableConcept] = Field(None, alias="validationType", serialization_alias="validationType")
    validator: Optional[L[VerificationResultValidator]] = Field(None, alias="validator", serialization_alias="validator")

