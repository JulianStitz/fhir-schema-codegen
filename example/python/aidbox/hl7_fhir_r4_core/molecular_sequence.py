# WARNING: This file is autogenerated by FHIR Schema Codegen.
# https://github.com/fhir-schema/fhir-schema-codegen
# Any manual changes made to this file may be overwritten.

from __future__ import annotations
from pydantic import BaseModel, ConfigDict, Field, PositiveInt
from typing import Optional, List as L, Literal

from aidbox.hl7_fhir_r4_core.base import BackboneElement, CodeableConcept, Identifier, Quantity, Reference
from aidbox.hl7_fhir_r4_core.domain_resource import DomainResource


class MolecularSequenceStructureVariantOuter(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    end: Optional[int] = Field(None, alias="end", serialization_alias="end")
    start: Optional[int] = Field(None, alias="start", serialization_alias="start")

class MolecularSequenceStructureVariantInner(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    end: Optional[int] = Field(None, alias="end", serialization_alias="end")
    start: Optional[int] = Field(None, alias="start", serialization_alias="start")

class MolecularSequenceStructureVariant(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    exact: Optional[bool] = Field(None, alias="exact", serialization_alias="exact")
    inner: Optional[MolecularSequenceStructureVariantInner] = Field(None, alias="inner", serialization_alias="inner")
    length: Optional[int] = Field(None, alias="length", serialization_alias="length")
    outer: Optional[MolecularSequenceStructureVariantOuter] = Field(None, alias="outer", serialization_alias="outer")
    variant_type: Optional[CodeableConcept] = Field(None, alias="variantType", serialization_alias="variantType")

class MolecularSequenceRepository(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    dataset_id: Optional[str] = Field(None, alias="datasetId", serialization_alias="datasetId")
    name: Optional[str] = Field(None, alias="name", serialization_alias="name")
    readset_id: Optional[str] = Field(None, alias="readsetId", serialization_alias="readsetId")
    type: Optional[Literal["directlink", "openapi", "login", "oauth", "other"]] = Field(None, alias="type", serialization_alias="type")
    url: Optional[str] = Field(None, alias="url", serialization_alias="url")
    variantset_id: Optional[str] = Field(None, alias="variantsetId", serialization_alias="variantsetId")

class MolecularSequenceVariant(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    cigar: Optional[str] = Field(None, alias="cigar", serialization_alias="cigar")
    end: Optional[int] = Field(None, alias="end", serialization_alias="end")
    observed_allele: Optional[str] = Field(None, alias="observedAllele", serialization_alias="observedAllele")
    reference_allele: Optional[str] = Field(None, alias="referenceAllele", serialization_alias="referenceAllele")
    start: Optional[int] = Field(None, alias="start", serialization_alias="start")
    variant_pointer: Optional[Reference] = Field(None, alias="variantPointer", serialization_alias="variantPointer")

class MolecularSequenceQualityRoc(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    f_measure: Optional[L[float]] = Field(None, alias="fMeasure", serialization_alias="fMeasure")
    num_fn: Optional[L[int]] = Field(None, alias="numFN", serialization_alias="numFN")
    num_fp: Optional[L[int]] = Field(None, alias="numFP", serialization_alias="numFP")
    num_tp: Optional[L[int]] = Field(None, alias="numTP", serialization_alias="numTP")
    precision: Optional[L[float]] = Field(None, alias="precision", serialization_alias="precision")
    score: Optional[L[int]] = Field(None, alias="score", serialization_alias="score")
    sensitivity: Optional[L[float]] = Field(None, alias="sensitivity", serialization_alias="sensitivity")

class MolecularSequenceQuality(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    end: Optional[int] = Field(None, alias="end", serialization_alias="end")
    f_score: Optional[float] = Field(None, alias="fScore", serialization_alias="fScore")
    gt_fp: Optional[float] = Field(None, alias="gtFP", serialization_alias="gtFP")
    method: Optional[CodeableConcept] = Field(None, alias="method", serialization_alias="method")
    precision: Optional[float] = Field(None, alias="precision", serialization_alias="precision")
    query_fp: Optional[float] = Field(None, alias="queryFP", serialization_alias="queryFP")
    query_tp: Optional[float] = Field(None, alias="queryTP", serialization_alias="queryTP")
    recall: Optional[float] = Field(None, alias="recall", serialization_alias="recall")
    roc: Optional[MolecularSequenceQualityRoc] = Field(None, alias="roc", serialization_alias="roc")
    score: Optional[Quantity] = Field(None, alias="score", serialization_alias="score")
    standard_sequence: Optional[CodeableConcept] = Field(None, alias="standardSequence", serialization_alias="standardSequence")
    start: Optional[int] = Field(None, alias="start", serialization_alias="start")
    truth_fn: Optional[float] = Field(None, alias="truthFN", serialization_alias="truthFN")
    truth_tp: Optional[float] = Field(None, alias="truthTP", serialization_alias="truthTP")
    type: Optional[Literal["indel", "snp", "unknown"]] = Field(None, alias="type", serialization_alias="type")

class MolecularSequenceReferenceSeq(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    chromosome: Optional[CodeableConcept] = Field(None, alias="chromosome", serialization_alias="chromosome")
    genome_build: Optional[str] = Field(None, alias="genomeBuild", serialization_alias="genomeBuild")
    orientation: Optional[Literal["sense", "antisense"]] = Field(None, alias="orientation", serialization_alias="orientation")
    reference_seq_id: Optional[CodeableConcept] = Field(None, alias="referenceSeqId", serialization_alias="referenceSeqId")
    reference_seq_pointer: Optional[Reference] = Field(None, alias="referenceSeqPointer", serialization_alias="referenceSeqPointer")
    reference_seq_string: Optional[str] = Field(None, alias="referenceSeqString", serialization_alias="referenceSeqString")
    strand: Optional[Literal["watson", "crick"]] = Field(None, alias="strand", serialization_alias="strand")
    window_end: Optional[int] = Field(None, alias="windowEnd", serialization_alias="windowEnd")
    window_start: Optional[int] = Field(None, alias="windowStart", serialization_alias="windowStart")


class MolecularSequence(DomainResource):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    coordinate_system: Optional[int] = Field(None, alias="coordinateSystem", serialization_alias="coordinateSystem")
    device: Optional[Reference] = Field(None, alias="device", serialization_alias="device")
    identifier: Optional[L[Identifier]] = Field(None, alias="identifier", serialization_alias="identifier")
    observed_seq: Optional[str] = Field(None, alias="observedSeq", serialization_alias="observedSeq")
    patient: Optional[Reference] = Field(None, alias="patient", serialization_alias="patient")
    performer: Optional[Reference] = Field(None, alias="performer", serialization_alias="performer")
    pointer: Optional[L[Reference]] = Field(None, alias="pointer", serialization_alias="pointer")
    quality: Optional[L[MolecularSequenceQuality]] = Field(None, alias="quality", serialization_alias="quality")
    quantity: Optional[Quantity] = Field(None, alias="quantity", serialization_alias="quantity")
    read_coverage: Optional[int] = Field(None, alias="readCoverage", serialization_alias="readCoverage")
    reference_seq: Optional[MolecularSequenceReferenceSeq] = Field(None, alias="referenceSeq", serialization_alias="referenceSeq")
    repository: Optional[L[MolecularSequenceRepository]] = Field(None, alias="repository", serialization_alias="repository")
    specimen: Optional[Reference] = Field(None, alias="specimen", serialization_alias="specimen")
    structure_variant: Optional[L[MolecularSequenceStructureVariant]] = Field(None, alias="structureVariant", serialization_alias="structureVariant")
    type: Optional[Literal["aa", "dna", "rna"]] = Field(None, alias="type", serialization_alias="type")
    variant: Optional[L[MolecularSequenceVariant]] = Field(None, alias="variant", serialization_alias="variant")

