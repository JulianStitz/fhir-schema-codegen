# WARNING: This file is autogenerated by FHIR Schema Codegen.
# https://github.com/fhir-schema/fhir-schema-codegen
# Any manual changes made to this file may be overwritten.

from __future__ import annotations
from pydantic import BaseModel, ConfigDict, Field, PositiveInt
from typing import Optional, List as L, Literal, ForwardRef

from aidbox.hl7_fhir_r4_core.base import BackboneElement, CodeableConcept, Identifier, Ratio, Reference
from aidbox.hl7_fhir_r4_core.domain_resource import DomainResource
from aidbox.hl7_fhir_r4_core.resource_families import DomainResourceFamily


class MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    country: Optional[L[CodeableConcept]] = Field(None, alias="country", serialization_alias="country")
    measurement_point: Optional[str] = Field(None, alias="measurementPoint", serialization_alias="measurementPoint")
    strength: Optional[Ratio] = Field(None, alias="strength", serialization_alias="strength")
    strength_low_limit: Optional[Ratio] = Field(None, alias="strengthLowLimit", serialization_alias="strengthLowLimit")
    substance: Optional[CodeableConcept] = Field(None, alias="substance", serialization_alias="substance")

class MedicinalProductIngredientSpecifiedSubstanceStrength(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    concentration: Optional[Ratio] = Field(None, alias="concentration", serialization_alias="concentration")
    concentration_low_limit: Optional[Ratio] = Field(None, alias="concentrationLowLimit", serialization_alias="concentrationLowLimit")
    country: Optional[L[CodeableConcept]] = Field(None, alias="country", serialization_alias="country")
    measurement_point: Optional[str] = Field(None, alias="measurementPoint", serialization_alias="measurementPoint")
    presentation: Optional[Ratio] = Field(None, alias="presentation", serialization_alias="presentation")
    presentation_low_limit: Optional[Ratio] = Field(None, alias="presentationLowLimit", serialization_alias="presentationLowLimit")
    reference_strength: Optional[L[MedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength]] = Field(None, alias="referenceStrength", serialization_alias="referenceStrength")

class MedicinalProductIngredientSpecifiedSubstance(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    code: Optional[CodeableConcept] = Field(None, alias="code", serialization_alias="code")
    confidentiality: Optional[CodeableConcept] = Field(None, alias="confidentiality", serialization_alias="confidentiality")
    group: Optional[CodeableConcept] = Field(None, alias="group", serialization_alias="group")
    strength: Optional[L[MedicinalProductIngredientSpecifiedSubstanceStrength]] = Field(None, alias="strength", serialization_alias="strength")

class MedicinalProductIngredientSubstance(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    code: Optional[CodeableConcept] = Field(None, alias="code", serialization_alias="code")
    strength: Optional[L[MedicinalProductIngredientSpecifiedSubstanceStrength]] = Field(None, alias="strength", serialization_alias="strength")


class MedicinalProductIngredient(DomainResource):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    resource_type: str = Field(
        default='MedicinalProductIngredient',
        alias='resourceType',
        serialization_alias='resourceType',
        frozen=True,
        pattern='MedicinalProductIngredient'
    )
    
    allergenic_indicator: Optional[bool] = Field(None, alias="allergenicIndicator", serialization_alias="allergenicIndicator")
    identifier: Optional[Identifier] = Field(None, alias="identifier", serialization_alias="identifier")
    manufacturer: Optional[L[Reference]] = Field(None, alias="manufacturer", serialization_alias="manufacturer")
    role: Optional[CodeableConcept] = Field(None, alias="role", serialization_alias="role")
    specified_substance: Optional[L[MedicinalProductIngredientSpecifiedSubstance]] = Field(None, alias="specifiedSubstance", serialization_alias="specifiedSubstance")
    substance: Optional[MedicinalProductIngredientSubstance] = Field(None, alias="substance", serialization_alias="substance")

