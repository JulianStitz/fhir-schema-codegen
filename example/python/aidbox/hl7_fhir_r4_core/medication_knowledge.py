# WARNING: This file is autogenerated by FHIR Schema Codegen.
# https://github.com/fhir-schema/fhir-schema-codegen
# Any manual changes made to this file may be overwritten.

from __future__ import annotations
from pydantic import BaseModel, ConfigDict, Field, PositiveInt
from typing import Optional, List as L, Literal, ForwardRef

from aidbox.hl7_fhir_r4_core.base import BackboneElement, CodeableConcept, Dosage, Duration, Money, Quantity, Ratio, Reference
from aidbox.hl7_fhir_r4_core.domain_resource import DomainResource
from aidbox.hl7_fhir_r4_core.resource_families import DomainResourceFamily


class MedicationKnowledgeMonograph(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    source: Optional[Reference] = Field(None, alias="source", serialization_alias="source")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")

class MedicationKnowledgeRegulatorySubstitution(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    allowed: Optional[bool] = Field(None, alias="allowed", serialization_alias="allowed")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")

class MedicationKnowledgeRegulatorySchedule(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    schedule: Optional[CodeableConcept] = Field(None, alias="schedule", serialization_alias="schedule")

class MedicationKnowledgeRegulatoryMaxDispense(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    period: Optional[Duration] = Field(None, alias="period", serialization_alias="period")
    quantity: Optional[Quantity] = Field(None, alias="quantity", serialization_alias="quantity")

class MedicationKnowledgeRegulatory(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    max_dispense: Optional[MedicationKnowledgeRegulatoryMaxDispense] = Field(None, alias="maxDispense", serialization_alias="maxDispense")
    regulatory_authority: Optional[Reference] = Field(None, alias="regulatoryAuthority", serialization_alias="regulatoryAuthority")
    schedule: Optional[L[MedicationKnowledgeRegulatorySchedule]] = Field(None, alias="schedule", serialization_alias="schedule")
    substitution: Optional[L[MedicationKnowledgeRegulatorySubstitution]] = Field(None, alias="substitution", serialization_alias="substitution")

class MedicationKnowledgeDrugCharacteristic(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")
    value_base64binary: Optional[str] = Field(None, alias="valueBase64Binary", serialization_alias="valueBase64Binary")
    value_codeable_concept: Optional[CodeableConcept] = Field(None, alias="valueCodeableConcept", serialization_alias="valueCodeableConcept")
    value_quantity: Optional[Quantity] = Field(None, alias="valueQuantity", serialization_alias="valueQuantity")
    value_string: Optional[str] = Field(None, alias="valueString", serialization_alias="valueString")

class MedicationKnowledgePackaging(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    quantity: Optional[Quantity] = Field(None, alias="quantity", serialization_alias="quantity")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")

class MedicationKnowledgeRelatedMedicationKnowledge(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    reference: Optional[L[Reference]] = Field(None, alias="reference", serialization_alias="reference")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")

class MedicationKnowledgeMedicineClassification(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    classification: Optional[L[CodeableConcept]] = Field(None, alias="classification", serialization_alias="classification")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")

class MedicationKnowledgeKinetics(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    area_under_curve: Optional[L[Quantity]] = Field(None, alias="areaUnderCurve", serialization_alias="areaUnderCurve")
    half_life_period: Optional[Duration] = Field(None, alias="halfLifePeriod", serialization_alias="halfLifePeriod")
    lethal_dose50: Optional[L[Quantity]] = Field(None, alias="lethalDose50", serialization_alias="lethalDose50")

class MedicationKnowledgeIngredient(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    is_active: Optional[bool] = Field(None, alias="isActive", serialization_alias="isActive")
    item_codeable_concept: Optional[CodeableConcept] = Field(None, alias="itemCodeableConcept", serialization_alias="itemCodeableConcept")
    item_reference: Optional[Reference] = Field(None, alias="itemReference", serialization_alias="itemReference")
    strength: Optional[Ratio] = Field(None, alias="strength", serialization_alias="strength")

class MedicationKnowledgeMonitoringProgram(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    name: Optional[str] = Field(None, alias="name", serialization_alias="name")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")

class MedicationKnowledgeAdministrationGuidelinesDosage(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    dosage: Optional[L[Dosage]] = Field(None, alias="dosage", serialization_alias="dosage")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")

class MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    characteristic_codeable_concept: Optional[CodeableConcept] = Field(None, alias="characteristicCodeableConcept", serialization_alias="characteristicCodeableConcept")
    characteristic_quantity: Optional[Quantity] = Field(None, alias="characteristicQuantity", serialization_alias="characteristicQuantity")
    value: Optional[L[str]] = Field(None, alias="value", serialization_alias="value")

class MedicationKnowledgeAdministrationGuidelines(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    dosage: Optional[L[MedicationKnowledgeAdministrationGuidelinesDosage]] = Field(None, alias="dosage", serialization_alias="dosage")
    indication_codeable_concept: Optional[CodeableConcept] = Field(None, alias="indicationCodeableConcept", serialization_alias="indicationCodeableConcept")
    indication_reference: Optional[Reference] = Field(None, alias="indicationReference", serialization_alias="indicationReference")
    patient_characteristics: Optional[L[MedicationKnowledgeAdministrationGuidelinesPatientCharacteristics]] = Field(None, alias="patientCharacteristics", serialization_alias="patientCharacteristics")

class MedicationKnowledgeCost(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    cost: Optional[Money] = Field(None, alias="cost", serialization_alias="cost")
    source: Optional[str] = Field(None, alias="source", serialization_alias="source")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")


class MedicationKnowledge(DomainResource):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    resource_type: str = Field(
        default='MedicationKnowledge',
        alias='resourceType',
        serialization_alias='resourceType',
        frozen=True,
        pattern='MedicationKnowledge'
    )
    
    administration_guidelines: Optional[L[MedicationKnowledgeAdministrationGuidelines]] = Field(None, alias="administrationGuidelines", serialization_alias="administrationGuidelines")
    amount: Optional[Quantity] = Field(None, alias="amount", serialization_alias="amount")
    associated_medication: Optional[L[Reference]] = Field(None, alias="associatedMedication", serialization_alias="associatedMedication")
    code: Optional[CodeableConcept] = Field(None, alias="code", serialization_alias="code")
    contraindication: Optional[L[Reference]] = Field(None, alias="contraindication", serialization_alias="contraindication")
    cost: Optional[L[MedicationKnowledgeCost]] = Field(None, alias="cost", serialization_alias="cost")
    dose_form: Optional[CodeableConcept] = Field(None, alias="doseForm", serialization_alias="doseForm")
    drug_characteristic: Optional[L[MedicationKnowledgeDrugCharacteristic]] = Field(None, alias="drugCharacteristic", serialization_alias="drugCharacteristic")
    ingredient: Optional[L[MedicationKnowledgeIngredient]] = Field(None, alias="ingredient", serialization_alias="ingredient")
    intended_route: Optional[L[CodeableConcept]] = Field(None, alias="intendedRoute", serialization_alias="intendedRoute")
    kinetics: Optional[L[MedicationKnowledgeKinetics]] = Field(None, alias="kinetics", serialization_alias="kinetics")
    manufacturer: Optional[Reference] = Field(None, alias="manufacturer", serialization_alias="manufacturer")
    medicine_classification: Optional[L[MedicationKnowledgeMedicineClassification]] = Field(None, alias="medicineClassification", serialization_alias="medicineClassification")
    monitoring_program: Optional[L[MedicationKnowledgeMonitoringProgram]] = Field(None, alias="monitoringProgram", serialization_alias="monitoringProgram")
    monograph: Optional[L[MedicationKnowledgeMonograph]] = Field(None, alias="monograph", serialization_alias="monograph")
    packaging: Optional[MedicationKnowledgePackaging] = Field(None, alias="packaging", serialization_alias="packaging")
    preparation_instruction: Optional[str] = Field(None, alias="preparationInstruction", serialization_alias="preparationInstruction")
    product_type: Optional[L[CodeableConcept]] = Field(None, alias="productType", serialization_alias="productType")
    regulatory: Optional[L[MedicationKnowledgeRegulatory]] = Field(None, alias="regulatory", serialization_alias="regulatory")
    related_medication_knowledge: Optional[L[MedicationKnowledgeRelatedMedicationKnowledge]] = Field(None, alias="relatedMedicationKnowledge", serialization_alias="relatedMedicationKnowledge")
    status: Optional[Literal["active", "inactive", "entered-in-error"]] = Field(None, alias="status", serialization_alias="status")
    synonym: Optional[L[str]] = Field(None, alias="synonym", serialization_alias="synonym")

