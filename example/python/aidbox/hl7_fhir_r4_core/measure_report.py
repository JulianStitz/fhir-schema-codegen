# WARNING: This file is autogenerated by FHIR Schema Codegen.
# https://github.com/fhir-schema/fhir-schema-codegen
# Any manual changes made to this file may be overwritten.

from __future__ import annotations
from pydantic import BaseModel, ConfigDict, Field, PositiveInt
from typing import Optional, List as L, Literal, ForwardRef

from aidbox.hl7_fhir_r4_core.base import BackboneElement, CodeableConcept, Identifier, Period, Quantity, Reference
from aidbox.hl7_fhir_r4_core.domain_resource import DomainResource
from aidbox.hl7_fhir_r4_core.resource_families import DomainResourceFamily


class MeasureReportGroupPopulation(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    code: Optional[CodeableConcept] = Field(None, alias="code", serialization_alias="code")
    count: Optional[int] = Field(None, alias="count", serialization_alias="count")
    subject_results: Optional[Reference] = Field(None, alias="subjectResults", serialization_alias="subjectResults")

class MeasureReportGroupStratifierStratumComponent(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    code: Optional[CodeableConcept] = Field(None, alias="code", serialization_alias="code")
    value: Optional[CodeableConcept] = Field(None, alias="value", serialization_alias="value")

class MeasureReportGroupStratifierStratumPopulation(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    code: Optional[CodeableConcept] = Field(None, alias="code", serialization_alias="code")
    count: Optional[int] = Field(None, alias="count", serialization_alias="count")
    subject_results: Optional[Reference] = Field(None, alias="subjectResults", serialization_alias="subjectResults")

class MeasureReportGroupStratifierStratum(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    component: Optional[L[MeasureReportGroupStratifierStratumComponent]] = Field(None, alias="component", serialization_alias="component")
    measure_score: Optional[Quantity] = Field(None, alias="measureScore", serialization_alias="measureScore")
    population: Optional[L[MeasureReportGroupStratifierStratumPopulation]] = Field(None, alias="population", serialization_alias="population")
    value: Optional[CodeableConcept] = Field(None, alias="value", serialization_alias="value")

class MeasureReportGroupStratifier(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    code: Optional[L[CodeableConcept]] = Field(None, alias="code", serialization_alias="code")
    stratum: Optional[L[MeasureReportGroupStratifierStratum]] = Field(None, alias="stratum", serialization_alias="stratum")

class MeasureReportGroup(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    code: Optional[CodeableConcept] = Field(None, alias="code", serialization_alias="code")
    measure_score: Optional[Quantity] = Field(None, alias="measureScore", serialization_alias="measureScore")
    population: Optional[L[MeasureReportGroupPopulation]] = Field(None, alias="population", serialization_alias="population")
    stratifier: Optional[L[MeasureReportGroupStratifier]] = Field(None, alias="stratifier", serialization_alias="stratifier")


class MeasureReport(DomainResource):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    resource_type: str = Field(
        default='MeasureReport',
        alias='resourceType',
        serialization_alias='resourceType',
        frozen=True,
        pattern='MeasureReport'
    )
    
    date: Optional[str] = Field(None, alias="date", serialization_alias="date")
    evaluated_resource: Optional[L[Reference]] = Field(None, alias="evaluatedResource", serialization_alias="evaluatedResource")
    group: Optional[L[MeasureReportGroup]] = Field(None, alias="group", serialization_alias="group")
    identifier: Optional[L[Identifier]] = Field(None, alias="identifier", serialization_alias="identifier")
    improvement_notation: Optional[CodeableConcept] = Field(None, alias="improvementNotation", serialization_alias="improvementNotation")
    measure: Optional[str] = Field(None, alias="measure", serialization_alias="measure")
    period: Optional[Period] = Field(None, alias="period", serialization_alias="period")
    reporter: Optional[Reference] = Field(None, alias="reporter", serialization_alias="reporter")
    status: Optional[Literal["complete", "pending", "error"]] = Field(None, alias="status", serialization_alias="status")
    subject: Optional[Reference] = Field(None, alias="subject", serialization_alias="subject")
    type: Optional[Literal["individual", "subject-list", "summary", "data-collection"]] = Field(None, alias="type", serialization_alias="type")

