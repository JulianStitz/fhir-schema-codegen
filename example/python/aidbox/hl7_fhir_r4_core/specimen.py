# WARNING: This file is autogenerated by FHIR Schema Codegen.
# https://github.com/fhir-schema/fhir-schema-codegen
# Any manual changes made to this file may be overwritten.

from __future__ import annotations
from pydantic import *
from typing import Optional, List as L, Literal

from aidbox.hl7_fhir_r4_core.base import *
from aidbox.hl7_fhir_r4_core.domain_resource import DomainResource


class SpecimenProcessing(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    additive: Optional[L[Reference]] = Field(None, alias="additive", serialization_alias="additive")
    description: Optional[str] = Field(None, alias="description", serialization_alias="description")
    procedure: Optional[CodeableConcept] = Field(None, alias="procedure", serialization_alias="procedure")
    time_date_time: Optional[str] = Field(None, alias="timeDateTime", serialization_alias="timeDateTime")
    time_period: Optional[Period] = Field(None, alias="timePeriod", serialization_alias="timePeriod")

class SpecimenContainer(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    additive_codeable_concept: Optional[CodeableConcept] = Field(None, alias="additiveCodeableConcept", serialization_alias="additiveCodeableConcept")
    additive_reference: Optional[Reference] = Field(None, alias="additiveReference", serialization_alias="additiveReference")
    capacity: Optional[Quantity] = Field(None, alias="capacity", serialization_alias="capacity")
    description: Optional[str] = Field(None, alias="description", serialization_alias="description")
    identifier: Optional[L[Identifier]] = Field(None, alias="identifier", serialization_alias="identifier")
    specimen_quantity: Optional[Quantity] = Field(None, alias="specimenQuantity", serialization_alias="specimenQuantity")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")

class SpecimenCollection(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    body_site: Optional[CodeableConcept] = Field(None, alias="bodySite", serialization_alias="bodySite")
    collected_date_time: Optional[str] = Field(None, alias="collectedDateTime", serialization_alias="collectedDateTime")
    collected_period: Optional[Period] = Field(None, alias="collectedPeriod", serialization_alias="collectedPeriod")
    collector: Optional[Reference] = Field(None, alias="collector", serialization_alias="collector")
    duration: Optional[Duration] = Field(None, alias="duration", serialization_alias="duration")
    fasting_status_codeable_concept: Optional[CodeableConcept] = Field(None, alias="fastingStatusCodeableConcept", serialization_alias="fastingStatusCodeableConcept")
    fasting_status_duration: Optional[Duration] = Field(None, alias="fastingStatusDuration", serialization_alias="fastingStatusDuration")
    method: Optional[CodeableConcept] = Field(None, alias="method", serialization_alias="method")
    quantity: Optional[Quantity] = Field(None, alias="quantity", serialization_alias="quantity")


class Specimen(DomainResource):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    accession_identifier: Optional[Identifier] = Field(None, alias="accessionIdentifier", serialization_alias="accessionIdentifier")
    collection: Optional[SpecimenCollection] = Field(None, alias="collection", serialization_alias="collection")
    condition: Optional[L[CodeableConcept]] = Field(None, alias="condition", serialization_alias="condition")
    container: Optional[L[SpecimenContainer]] = Field(None, alias="container", serialization_alias="container")
    identifier: Optional[L[Identifier]] = Field(None, alias="identifier", serialization_alias="identifier")
    note: Optional[L[Annotation]] = Field(None, alias="note", serialization_alias="note")
    parent: Optional[L[Reference]] = Field(None, alias="parent", serialization_alias="parent")
    processing: Optional[L[SpecimenProcessing]] = Field(None, alias="processing", serialization_alias="processing")
    received_time: Optional[str] = Field(None, alias="receivedTime", serialization_alias="receivedTime")
    request: Optional[L[Reference]] = Field(None, alias="request", serialization_alias="request")
    status: Optional[Literal["available", "unavailable", "unsatisfactory", "entered-in-error"]] = Field(None, alias="status", serialization_alias="status")
    subject: Optional[Reference] = Field(None, alias="subject", serialization_alias="subject")
    type: Optional[CodeableConcept] = Field(None, alias="type", serialization_alias="type")

