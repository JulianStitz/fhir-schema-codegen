# WARNING: This file is autogenerated by FHIR Schema Codegen.
# https://github.com/fhir-schema/fhir-schema-codegen
# Any manual changes made to this file may be overwritten.

from __future__ import annotations
from pydantic import BaseModel, ConfigDict, Field, PositiveInt
from typing import List as PyList, Literal, ForwardRef

from aidbox.hl7_fhir_r4_core.base import BackboneElement, CodeableConcept, Identifier, Reference
from aidbox.hl7_fhir_r4_core.domain_resource import DomainResource
from aidbox.hl7_fhir_r4_core.resource_families import DomainResourceFamily


class DocumentManifestRelated(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    identifier: Identifier | None = Field(None, alias="identifier", serialization_alias="identifier")
    ref: Reference | None = Field(None, alias="ref", serialization_alias="ref")


class DocumentManifest(DomainResource):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    resource_type: str = Field(
        default='DocumentManifest',
        alias='resourceType',
        serialization_alias='resourceType',
        frozen=True,
        pattern='DocumentManifest'
    )
    
    author: PyList[Reference] | None = Field(None, alias="author", serialization_alias="author")
    content: PyList[Reference] | None = Field(None, alias="content", serialization_alias="content")
    created: str | None = Field(None, alias="created", serialization_alias="created")
    description: str | None = Field(None, alias="description", serialization_alias="description")
    identifier: PyList[Identifier] | None = Field(None, alias="identifier", serialization_alias="identifier")
    master_identifier: Identifier | None = Field(None, alias="masterIdentifier", serialization_alias="masterIdentifier")
    recipient: PyList[Reference] | None = Field(None, alias="recipient", serialization_alias="recipient")
    related: PyList[DocumentManifestRelated] | None = Field(None, alias="related", serialization_alias="related")
    source: str | None = Field(None, alias="source", serialization_alias="source")
    status: Literal["current", "superseded", "entered-in-error"] | None = Field(None, alias="status", serialization_alias="status")
    subject: Reference | None = Field(None, alias="subject", serialization_alias="subject")
    type: CodeableConcept | None = Field(None, alias="type", serialization_alias="type")
    
    def to_json(self, indent: int | None = None) -> str:
        return self.model_dump_json(exclude_unset=True, exclude_none=True, indent=indent)
    
    @classmethod
    def from_json(cls, json: str) -> DocumentManifest:
        return cls.model_validate_json(json)

