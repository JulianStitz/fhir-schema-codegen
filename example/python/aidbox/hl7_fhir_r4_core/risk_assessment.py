# WARNING: This file is autogenerated by FHIR Schema Codegen.
# https://github.com/fhir-schema/fhir-schema-codegen
# Any manual changes made to this file may be overwritten.

from __future__ import annotations
from pydantic import BaseModel, ConfigDict, Field, PositiveInt
from typing import Optional, List as L, Literal, ForwardRef

from aidbox.hl7_fhir_r4_core.base import Annotation, BackboneElement, CodeableConcept, Identifier, Period, Range, Reference
from aidbox.hl7_fhir_r4_core.domain_resource import DomainResource
from aidbox.hl7_fhir_r4_core.resource_families import DomainResourceFamily


class RiskAssessmentPrediction(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    outcome: Optional[CodeableConcept] = Field(None, alias="outcome", serialization_alias="outcome")
    probability_decimal: Optional[float] = Field(None, alias="probabilityDecimal", serialization_alias="probabilityDecimal")
    probability_range: Optional[Range] = Field(None, alias="probabilityRange", serialization_alias="probabilityRange")
    qualitative_risk: Optional[CodeableConcept] = Field(None, alias="qualitativeRisk", serialization_alias="qualitativeRisk")
    rationale: Optional[str] = Field(None, alias="rationale", serialization_alias="rationale")
    relative_risk: Optional[float] = Field(None, alias="relativeRisk", serialization_alias="relativeRisk")
    when_period: Optional[Period] = Field(None, alias="whenPeriod", serialization_alias="whenPeriod")
    when_range: Optional[Range] = Field(None, alias="whenRange", serialization_alias="whenRange")


class RiskAssessment(DomainResource):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True, extra="forbid")
    
    resource_type: str = Field(
        default='RiskAssessment',
        alias='resourceType',
        serialization_alias='resourceType',
        frozen=True,
        pattern='RiskAssessment'
    )
    
    based_on: Optional[Reference] = Field(None, alias="basedOn", serialization_alias="basedOn")
    basis: Optional[L[Reference]] = Field(None, alias="basis", serialization_alias="basis")
    code: Optional[CodeableConcept] = Field(None, alias="code", serialization_alias="code")
    condition: Optional[Reference] = Field(None, alias="condition", serialization_alias="condition")
    encounter: Optional[Reference] = Field(None, alias="encounter", serialization_alias="encounter")
    identifier: Optional[L[Identifier]] = Field(None, alias="identifier", serialization_alias="identifier")
    method: Optional[CodeableConcept] = Field(None, alias="method", serialization_alias="method")
    mitigation: Optional[str] = Field(None, alias="mitigation", serialization_alias="mitigation")
    note: Optional[L[Annotation]] = Field(None, alias="note", serialization_alias="note")
    occurrence_date_time: Optional[str] = Field(None, alias="occurrenceDateTime", serialization_alias="occurrenceDateTime")
    occurrence_period: Optional[Period] = Field(None, alias="occurrencePeriod", serialization_alias="occurrencePeriod")
    parent: Optional[Reference] = Field(None, alias="parent", serialization_alias="parent")
    performer: Optional[Reference] = Field(None, alias="performer", serialization_alias="performer")
    prediction: Optional[L[RiskAssessmentPrediction]] = Field(None, alias="prediction", serialization_alias="prediction")
    reason_code: Optional[L[CodeableConcept]] = Field(None, alias="reasonCode", serialization_alias="reasonCode")
    reason_reference: Optional[L[Reference]] = Field(None, alias="reasonReference", serialization_alias="reasonReference")
    status: Optional[Literal["registered", "preliminary", "final", "amended", "cancelled", "entered-in-error", "unknown"]] = Field(None, alias="status", serialization_alias="status")
    subject: Optional[Reference] = Field(None, alias="subject", serialization_alias="subject")

