# WARNING: This file is autogenerated by FHIR Schema Codegen.
# https://github.com/fhir-schema/fhir-schema-codegen
# Any manual changes made to this file may be overwritten.

from __future__ import annotations
from pydantic import *
from typing import Optional, List as L, Literal

from aidbox.hl7_fhir_r4_core.base import *
from aidbox.hl7_fhir_r4_core.domain_resource import DomainResource


class SubstanceInstance(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    expiry: Optional[str] = Field(None, alias="expiry", serialization_alias="expiry")
    identifier: Optional[Identifier] = Field(None, alias="identifier", serialization_alias="identifier")
    quantity: Optional[Quantity] = Field(None, alias="quantity", serialization_alias="quantity")

class SubstanceIngredient(BackboneElement):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    quantity: Optional[Ratio] = Field(None, alias="quantity", serialization_alias="quantity")
    substance_codeable_concept: Optional[CodeableConcept] = Field(None, alias="substanceCodeableConcept", serialization_alias="substanceCodeableConcept")
    substance_reference: Optional[Reference] = Field(None, alias="substanceReference", serialization_alias="substanceReference")


class Substance(DomainResource):
    model_config = ConfigDict(validate_by_name=True, serialize_by_alias=True)
    
    category: Optional[L[CodeableConcept]] = Field(None, alias="category", serialization_alias="category")
    code: Optional[CodeableConcept] = Field(None, alias="code", serialization_alias="code")
    description: Optional[str] = Field(None, alias="description", serialization_alias="description")
    identifier: Optional[L[Identifier]] = Field(None, alias="identifier", serialization_alias="identifier")
    ingredient: Optional[L[SubstanceIngredient]] = Field(None, alias="ingredient", serialization_alias="ingredient")
    instance: Optional[L[SubstanceInstance]] = Field(None, alias="instance", serialization_alias="instance")
    status: Optional[Literal["active", "inactive", "entered-in-error"]] = Field(None, alias="status", serialization_alias="status")

